import { useState, useCallback, useEffect } from 'react';

import {
    Card,
    Select,
    TextField,
    Box,
	Grid, 
	BlockStack,
	Checkbox,
	InlineError,
    Text,
    RadioButton,
    InlineStack,
    Divider,
    Button
} from '@shopify/polaris';
import settingsJson from './../../../utils/settings.json';


export default function DiscountPhotoVideoReview(props) {

    const [isEnableDiscountChecked, setIsEnableDiscountChecked] = useState(
        props.reviewDiscountSettings?.isDiscountEnabled || false
    );
    const [selectedSameDiscount, setSelectedSameDiscount] = useState(
        props.reviewDiscountSettings?.isSameDiscount || false
    );

    const [selectedSameDiscountType, setSelectedSameDiscountType] = useState(
        props.reviewDiscountSettings?.sameDiscountType || false
    );

    const [selectedDifferentDiscountPhotoType, setSelectedDifferentDiscountPhotoType] = useState(
        props.reviewDiscountSettings?.differentDiscountPhotoType || false
    );
    const [selectedDifferentDiscountVideoType, setSelectedDifferentDiscountVideoType] = useState(
        props.reviewDiscountSettings?.differentDiscountVideoType || false
    );

    const [sameDiscountValue, setSameDiscountValue] = useState(
        props.reviewDiscountSettings?.sameDiscountValue || 0
    );

    const [differentDiscountPhotoValue, setDifferentDiscountPhotoValue] = useState(
        props.reviewDiscountSettings?.differentDiscountPhotoValue || 0
    );

    const [differentDiscountVideoValue, setDifferentDiscountVideoValue] = useState(
        props.reviewDiscountSettings?.differentDiscountVideoValue || 0
    );


    const [selectedAutoGeneratedDiscount, setSelectedAutoGeneratedDiscount] = useState(
        props.reviewDiscountSettings?.isAutoGeneratedDiscount || false
    );

    const [discountMessage, setDiscountMessage] = useState(null);

    const [selectedDiscountCode, setSelectedDiscountCode] = useState(
        props.reviewDiscountSettings?.discountCode || ""
    );
    const [initialData, setInitialData] = useState({});


    const [reviewDiscountSettingsObj, setReviewDiscountSettingsObj] = useState(
        props.reviewDiscountSettings ?? {}
    );


    useEffect(() => {
        setInitialData({
            sameDiscountValue: reviewDiscountSettingsObj.sameDiscountValue || '',
            differentDiscountVideoValue: reviewDiscountSettingsObj.differentDiscountVideoValue || '',
            differentDiscountPhotoValue: reviewDiscountSettingsObj.differentDiscountPhotoValue || '',
            discountCode: reviewDiscountSettingsObj.discountCode || '',
        });

    }, [reviewDiscountSettingsObj]);


    const handleCheckboxEnableChange = useCallback(async (checked, name) => {
        try {
            const eventKey = name;

            const updateData = {
                field: name,
                value: checked,
                actionType: "discountPhotoVideoReview",
                shop: props.shopRecords.shop
            };

            const response = await fetch('/api/collect-review-setting', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData),
            });
            const data = await response.json();
            if (data.status == 200) {
                shopify.toast.show(data.message, {
                    duration: settingsJson.toasterCloseTime
                });
            } else {
                shopify.toast.show(data.message, {
                    duration: settingsJson.toasterCloseTime,
                    isError: true
                });
            }
            if (eventKey == 'isDiscountEnabled') {
                setIsEnableDiscountChecked(checked);
            }
        } catch (error) {
            console.error('Error updating record:', error);
        }

    });


    const handleSelectChange = async (value, name) => {
        const updateData = {
            field: name,
            value: value,
            shop: props.shopRecords.shop,
            actionType: "discountPhotoVideoReview"
        };
        const response = await fetch('/api/collect-review-setting', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData),
        });
        const data = await response.json();
        if (data.status == 200) {

            setReviewDiscountSettingsObj(prevState => ({
                ...prevState,
                [name]: value
            }));


            shopify.toast.show(data.message, {
                duration: settingsJson.toasterCloseTime
            });
        } else {
            shopify.toast.show(data.message, {
                duration: settingsJson.toasterCloseTime,
                isError: true
            });
        }

    };

    const changeRadioButtons =  useCallback(async (value, name) => {
        try {

            console.log(value, name);
            
            const eventKey = name;
            const eventVal = value;
            const updateData = {
                field: name,
                value: eventVal,
                actionType: "discountPhotoVideoReview",
                shop: props.shopRecords.shop
            };
            if (name == "sameDiscountType" && eventVal == "percentage") {
                const percentageVal = parseFloat(reviewDiscountSettingsObj.sameDiscountValue);
                if (percentageVal >= 100) {
                    shopify.toast.show('Invalid Discount percentage', {
                        duration: settingsJson.toasterCloseTime,
                        isError: true
                    });
                    return true;
                }
            } else if (name == "differentDiscountPhotoType" && eventVal == "percentage") {
                const percentageVal = parseFloat(reviewDiscountSettingsObj.differentDiscountPhotoValue);
                if (percentageVal >= 100) {
                    shopify.toast.show('Invalid Discount percentage', {
                        duration: settingsJson.toasterCloseTime,
                        isError: true
                    });
                    return true;
                }
            } else if (name == "differentDiscountVideoType" && eventVal == "percentage") {
                const percentageVal = parseFloat(reviewDiscountSettingsObj.differentDiscountVideoValue);
                if (percentageVal >= 100) {
                    shopify.toast.show('Invalid Discount percentage', {
                        duration: settingsJson.toasterCloseTime,
                        isError: true
                    });
                    return true;
                }
            }


        const response = await fetch('/api/collect-review-setting', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData),
        });
        const data = await response.json();
        if (data.status == 200) {

            setReviewDiscountSettingsObj(prevState => ({
                ...prevState,
                [eventKey]: eventVal
            }));

            shopify.toast.show(data.message, {
                duration: settingsJson.toasterCloseTime
            });
        } else {
            shopify.toast.show(data.message, {
                duration: settingsJson.toasterCloseTime,
                isError: true
            });
        }
        if (eventKey == 'isSameDiscount') {
            //console.log(eventVal);
            //console.log(typeof (eventVal == true));

            setSelectedSameDiscount(eventVal); // Convert string to boolean

            // setSelectedSameDiscount(eventVal);
            if (!eventVal) {
                setSelectedAutoGeneratedDiscount(true);
            }
        } else if (eventKey == 'sameDiscountType') {
            setSelectedSameDiscountType(eventVal);
        } else if (eventKey == 'differentDiscountPhotoType') {
            setSelectedDifferentDiscountPhotoType(eventVal);
        } else if (eventKey == 'differentDiscountVideoType') {
            setSelectedDifferentDiscountVideoType(eventVal);
        } else if (eventKey == 'isAutoGeneratedDiscount') {
            setSelectedAutoGeneratedDiscount(eventVal);
        }


        } catch (error) {
            console.error('Error updating record:', error);
        }

    });

    const changeInput = useCallback(async (value, name) => {
        const eventKey = name;
        const eventVal = value;

        if (eventKey == 'sameDiscountValue') {
            setSameDiscountValue(eventVal);
        } else if (eventKey == 'differentDiscountPhotoValue') {
            setDifferentDiscountPhotoValue(eventVal);
        } else if (eventKey == 'differentDiscountVideoValue') {
            setDifferentDiscountVideoValue(eventVal);
        } else if (eventKey == 'discountCode') {
            setSelectedDiscountCode(eventVal);
        }

    });


    const inputBlur = async (e) => {
        if (initialData[e.target.name] != e.target.value) {
            if (e.target.name == "discountCode") {
                setReviewDiscountSettingsObj(prevState => ({
                    ...prevState,
                    [e.target.name]: e.target.value
                }));
                return true;
            }
            const updateData = {
                field: e.target.name,
                value: e.target.value,
                actionType: "discountPhotoVideoReview",
                shop: props.shopRecords.shop
            };

            if (reviewDiscountSettingsObj.isSameDiscount == 'true' && reviewDiscountSettingsObj.sameDiscountType == "percentage") {
                const percentageVal = parseFloat(e.target.value);
                if (percentageVal >= 100) {
                    shopify.toast.show('Invalid Discount percentage', {
                        duration: settingsJson.toasterCloseTime,
                        isError: true
                    });
                    return true;
                }
            } else {
                if ((reviewDiscountSettingsObj.differentDiscountPhotoType == "percentage" && e.target.name == 'differentDiscountPhotoValue')
                    || (reviewDiscountSettingsObj.differentDiscountVideoType == "percentage" && e.target.name == 'differentDiscountVideoValue')) {
                    const percentageVal = parseFloat(e.target.value);
                    if (percentageVal >= 100) {
                        shopify.toast.show('Invalid Discount percentage', {
                            duration: settingsJson.toasterCloseTime,
                            isError: true
                        });
                        return true;
                    }
                }
            }


            const response = await fetch('/api/collect-review-setting', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData),
            });
            const data = await response.json();
            if (data.status == 200) {

                setReviewDiscountSettingsObj(prevState => ({
                    ...prevState,
                    [e.target.name]: e.target.value
                }));

                shopify.toast.show(data.message, {
                    duration: settingsJson.toasterCloseTime
                });
                if (e.target.name == 'discountCode' && e.target.value == "") {
                    setDiscountMessage("");
                }

            } else {
                shopify.toast.show(data.message, {
                    duration: settingsJson.toasterCloseTime,
                    isError: true
                });
            }
        }

    }

    const validateDiscountCode = async () => {

        const updateData = {
            code: reviewDiscountSettingsObj.discountCode,
            actionType: "validateDiscountCode",
            shop: props.shopRecords.shop
        };
        const response = await fetch('/api/collect-review-setting', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData),
        });
        const data = await response.json();
        if (data.status == 200) {
            setDiscountMessage(data.message);

        }

    }




    return (
        <BlockStack gap="400">
            <div className="form-check form-switch">
                <Checkbox
                    label="Enable discount for photo/video"
                    checked={isEnableDiscountChecked}
                    onChange={ (value) => handleCheckboxEnableChange(value , "isDiscountEnabled")}
                />
            </div>
            <Card>
                <BlockStack gap='400'>
                    <Grid>
                        <Grid.Cell columnSpan={{xs: 12, sm: 12, md: 6, lg: 6, xl: 6}}>
                            <RadioButton
                                label="Same discount"
                                helpText="Offer the same discount for photo/video"
                                checked={selectedSameDiscount}
                                name="isSameDiscount"
                                onChange={() => changeRadioButtons(true, "isSameDiscount")}
                                disabled={!isEnableDiscountChecked}
                                id="sameDiscount"
                            />
                        </Grid.Cell>
                        <Grid.Cell columnSpan={{xs: 12, sm: 12, md: 6, lg: 6, xl: 6}}>
                            <RadioButton
                                label="Different discount"
                                helpText="Offer different discounts for photo/video"
                                checked={!selectedSameDiscount}
                                name="isSameDiscount"
                                onChange={() => changeRadioButtons(false, "isSameDiscount")}
                                disabled={!isEnableDiscountChecked}
                                id="differentDiscount"
                            />
                        </Grid.Cell>
                    </Grid>
                    <Divider />
                    <InlineStack gap='1000' direction="row" align="start" blockAlign='center'>
                        {selectedSameDiscount &&
                            <Box>
                                <BlockStack gap="200">
                                    <Text as='p' variant='bodyMd' tone={!isEnableDiscountChecked ? 'disabled' : ''}>Discount amount</Text>
                                    <InlineStack gap='500' direction="row" align="start" blockAlign='center'>
                                        <InlineStack gap='200' direction="row" align="start" blockAlign='center'>
                                            <Box>
                                                <RadioButton
                                                    label="%"
                                                    checked={selectedSameDiscountType === 'percentage'}
                                                    id="amountpersantage"
                                                    name="sameDiscountType"
                                                    onChange={() => changeRadioButtons('percentage', "sameDiscountType")}
                                                    disabled={!isEnableDiscountChecked}
                                                    value="percentage"
                                                />
                                            </Box>
                                            <Box>
                                                <RadioButton
                                                    label={props.shopRecords.currency_symbol}
                                                    checked={selectedSameDiscountType === 'fixed_amount'}
                                                    id="amountdoller"
                                                    name="sameDiscountType"
                                                    onChange={() => changeRadioButtons('fixed_amount', "sameDiscountType")}
                                                    disabled={!isEnableDiscountChecked}
                                                    value="fixed_amount"
                                                />
                                            </Box>
                                        </InlineStack>
                                        <Box width='100px'>
                                            <TextField
                                                label="Quantity"
                                                type="number"
                                                value={sameDiscountValue}
                                                onChange={(value) => changeInput(value , "sameDiscountValue")}
                                                autoComplete="off"
                                                disabled={!isEnableDiscountChecked}
                                                onBlur={inputBlur}
                                                name="sameDiscountValue"
                                                placeholder='Amount'
                                                labelHidden={true}
                                            />
                                        </Box>
                                    </InlineStack>
                                </BlockStack>
                            </Box>
                        }
                        {selectedSameDiscount === false &&
                            <>
                                <Box>
                                    <BlockStack gap="200">
                                        {/* <label htmlFor="" className='w-auto'>Discount for a photo </label> */}
                                        <Text as='p' variant='bodyMd' tone={!isEnableDiscountChecked ? 'disabled' : ''}>Discount for a photo</Text>
                                        <InlineStack gap='500' direction="row" align="start" blockAlign='center'>
                                            <InlineStack gap='200' direction="row" align="start" blockAlign='center'>
                                                <Box>
                                                    <RadioButton
                                                        label="%"
                                                        checked={selectedDifferentDiscountPhotoType === 'percentage'}
                                                        id="diffamountpersantage"
                                                        name="differentDiscountPhotoType"
                                                        onChange={() => changeRadioButtons('percentage', "differentDiscountPhotoType")}
                                                        disabled={!isEnableDiscountChecked}
                                                        value="percentage"
                                                    />
                                                </Box>
                                                <Box>
                                                    <RadioButton
                                                        label={props.shopRecords.currency_symbol}
                                                        checked={selectedDifferentDiscountPhotoType === 'fixed_amount'}
                                                        id="diffamountdoller"
                                                        name="differentDiscountPhotoType"
                                                        onChange={() => changeRadioButtons('fixed_amount', "differentDiscountPhotoType")}
                                                        disabled={!isEnableDiscountChecked}
                                                        value="fixed_amount"
                                                    />
                                                </Box>
                                            </InlineStack>
                                            <Box width='100px'>
                                                <TextField
                                                    label="Quantity"
                                                    type="number"
                                                    value={differentDiscountPhotoValue}
                                                    onChange={(value) => changeInput(value , "differentDiscountPhotoValue")}
                                                    autoComplete="off"
                                                    disabled={!isEnableDiscountChecked}
                                                    onBlur={inputBlur}
                                                    name="differentDiscountPhotoValue"
                                                    placeholder='Amount'
                                                    labelHidden={true}
                                                />
                                            </Box>
                                        </InlineStack>
                                    </BlockStack>
                                </Box>
                                <Box>
                                    <BlockStack gap="200">
                                        {/* <label htmlFor="" className='w-auto'>Discount for a video </label> */}
                                        <Text as='p' variant='bodyMd' tone={!isEnableDiscountChecked ? 'disabled' : ''}>Discount for a video</Text>
                                        <InlineStack gap='500' direction="row" align="start" blockAlign='center'>
                                            <InlineStack gap='200' direction="row" align="start" blockAlign='center'>
                                                <Box>
                                                    <RadioButton
                                                        label='%'
                                                        checked={selectedDifferentDiscountVideoType === 'percentage'}
                                                        id="diffvideoamountpersantage"
                                                        name="differentDiscountVideoType"
                                                        onChange={() => changeRadioButtons('percentage', "differentDiscountVideoType")}
                                                        disabled={!isEnableDiscountChecked}
                                                        value="percentage"
                                                    />
                                                </Box>
                                                <Box>
                                                    <RadioButton
                                                        label={props.shopRecords.currency_symbol}
                                                        checked={selectedDifferentDiscountVideoType === 'fixed_amount'}
                                                        id="diffvideoamountdoller"
                                                        name="differentDiscountVideoType"
                                                        onChange={() => changeRadioButtons('fixed_amount', "differentDiscountVideoType")}
                                                        disabled={!isEnableDiscountChecked}
                                                        value="fixed_amount"
                                                    />
                                                </Box>
                                            </InlineStack>
                                            <Box width='100px'>
                                                <TextField
                                                    label="Quantity"
                                                    type="number"
                                                    value={differentDiscountVideoValue}
                                                    onChange={(value) => changeInput(value , "differentDiscountVideoValue")}
                                                    autoComplete="off"
                                                    disabled={!isEnableDiscountChecked}
                                                    onBlur={inputBlur}
                                                    name="differentDiscountVideoValue"
                                                    placeholder='Amount'
                                                    labelHidden={true}
                                                />
                                            </Box>
                                        </InlineStack>
                                    </BlockStack>
                                </Box>
                            </>
                        }
                    </InlineStack>
                </BlockStack>
            </Card>
            <Card>
                <BlockStack gap='400'>
                    <Grid>
                        <Grid.Cell columnSpan={{xs: 12, sm: 12, md: 6, lg: 6, xl: 6}}>
                            <RadioButton
                                label="Auto-generate"
                                helpText="A one time use code for each review"
                                checked={selectedAutoGeneratedDiscount}
                                name="isAutoGeneratedDiscount"
                                onChange={() => changeRadioButtons(true, "isAutoGeneratedDiscount")}
                                disabled={!isEnableDiscountChecked}
                                id="autogenerate"
                            />
                        </Grid.Cell>
                        <Grid.Cell columnSpan={{xs: 12, sm: 12, md: 6, lg: 6, xl: 6}}>
                            <RadioButton
                                label="Single Shopify discount code"
                                helpText="Same code for all customers"
                                checked={!selectedAutoGeneratedDiscount}
                                name="isAutoGeneratedDiscount"
                                onChange={() => changeRadioButtons(false, "isAutoGeneratedDiscount")}
                                disabled={!isEnableDiscountChecked || !selectedSameDiscount}
                                id="discountcode"
                            />
                        </Grid.Cell>
                    </Grid>
                    <Divider />
                    {selectedAutoGeneratedDiscount &&
                        <>
                            <InlineStack gap='500' direction="row" align="start" blockAlign='center'>
                                <Text as='p' variant='bodyMd' tone={!isEnableDiscountChecked ? 'disabled' : ''}>Discount expires after</Text>
                                <Select
                                    name="expiredAfter"
                                    id="expiredAfter"
                                    options={settingsJson.discountExpireDays}
                                    disabled={!isEnableDiscountChecked}
                                    onChange={
                                        handleSelectChange
                                    }
                                    value={reviewDiscountSettingsObj?.expiredAfter}
                                />
                            </InlineStack>
                        </>
                    }
                    {selectedAutoGeneratedDiscount === false &&
                        <div className=''>
                            <Grid>
                                <Grid.Cell columnSpan={{xs: 12, sm: 12, md: 6, lg: 5, xl: 5}}>
                                    <BlockStack gap="200">
                                        <TextField
                                            label="Insert code"
                                            value={selectedDiscountCode}
                                            onChange={(value) => changeInput(value , "discountCode")}
                                            disabled={!isEnableDiscountChecked}
                                            onBlur={inputBlur}
                                            name="discountCode"
                                            // placeholder='(e.g. PHOTO-REVIEW)'
                                            helpText="First create the discount on Shopify and then add here"
                                        />
                                        {/* <InlineError message={discountMessage} /> */}
                                        <Box>
                                            <Button fullWidth={false} variant="primary" disabled={!selectedDiscountCode || !isEnableDiscountChecked} onClick={validateDiscountCode}>Validate</Button>
                                        </Box>
                                    </BlockStack>
                                </Grid.Cell>
                            </Grid>
                        </div>
                    }
                </BlockStack>
            </Card>
            <InlineStack gap='500' direction="row" align="start" blockAlign='center'>
                <Text as='p' variant='bodyMd' tone={!isEnableDiscountChecked ? 'disabled' : ''}>Offer to reviewers from</Text>
                <Select
                    label="Offer to reviewers from"
                    name="reviewType"
                    id="reviewType"
                    className="w3nuts"
                    options={settingsJson.discountOfferReviewer}
                    disabled={!isEnableDiscountChecked}
                    onChange={
                        handleSelectChange
                    }
                    value={reviewDiscountSettingsObj?.reviewType}
                    labelHidden={true}
                />
            </InlineStack>
        </BlockStack>
    );
}